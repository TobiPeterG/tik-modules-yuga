# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: Copyright 2024 Tobias GÃ¶rgens

post_dir="/var/lib/tik/post"
post_pipe="/tmp/postpipe"
[ -d "${post_dir}/mnt" ] || prun /usr/bin/mkdir -p "${post_dir}/mnt"
[ -p "${post_pipe}" ] || /usr/bin/mkfifo "${post_pipe}"

post_progress() {
    log "[post_progress] Monitoring post install setup progress"
    (tail -f "${post_pipe}") | d --progress --title="Configuring System" --auto-close --no-cancel --width=400
    rm "${post_pipe}"
    log "[post_progress] Post install setup progress reached 100%"
}

find_install() {
    echo "# Finding installation partition" > "${post_pipe}"
    log "[find_install] finding installation partition"
    probe_partitions "$TIK_INSTALL_DEVICE" "btrfs" "/usr/lib/os-release"
    [ -n "${probedpart}" ] || error "POST INSTALL FAILED: New Installation NOT FOUND"
    syspart="${probedpart}"
    log "[find_install] found ${syspart}"
    echo "14" > "${post_pipe}"
}

find_esp() {
    echo "# Finding installation ESP partition" > "${post_pipe}"
    log "[find_esp] finding ESP"
    probe_partitions "${TIK_INSTALL_DEVICE}" "vfat"
    [ -n "${probedpart}" ] || error "POST INSTALL FAILED: ESP Partition NOT FOUND"
    esppart="${probedpart}"
    log "[find_esp] found ${esppart}"
    echo "28" > "${post_pipe}"
}

mount_partition() {
    echo "# Mounting ${syspart}" > "${post_pipe}"
    log "[open_partition] mounting ${syspart} for chroot"
    prun /usr/bin/mount -o compress=zstd:1 "${syspart}" "${post_dir}/mnt"
    for i in proc dev sys 'sys/firmware/efi/efivars' 'sys/fs/cgroup'; do
        prun /usr/bin/mount --bind "/$i" "${post_dir}/mnt/$i"
    done
    echo "35" > "${post_pipe}"
    prun /usr/bin/mount -o compress=zstd:1,subvol=/@/.snapshots "${syspart}" "${post_dir}/mnt/.snapshots"
    prun /usr/bin/mount -o compress=zstd:1,subvol=/@/var "${syspart}" "${post_dir}/mnt/var"
    etcmountcmd=$(cat "${post_dir}/mnt/etc/fstab" | grep "overlay /etc" | sed 's/\/sysroot\//${post_dir}\/mnt\//g' | sed 's/\/work-etc.*/\/work-etc ${post_dir}\/mnt\/etc\//' | sed 's/overlay \/etc overlay/\/usr\/bin\/mount -t overlay overlay -o/')
    eval prun "$etcmountcmd"
    prun /usr/bin/mount "${esppart}" "${post_dir}/mnt/boot/efi"
    prun /usr/bin/mount -t tmpfs tmpfs "${post_dir}/mnt/run"
    prun /usr/bin/mount -t tmpfs tmpfs "${post_dir}/mnt/tmp"
    prun /usr/bin/mount -t securityfs securityfs "${post_dir}/mnt/sys/kernel/security"
    prun /usr/bin/mount -t btrfs -o subvol=/ "${syspart}" "${post_dir}/mnt/mnt"
    echo "42" > "${post_pipe}"
}

configure_esp() {
    echo "# Configuring cmdline, fstab" > "${post_pipe}"
    log "[configure_esp] configuring cmdline, fstab and populating ${esppart}"
    espUUID=$(lsblk -n -r -o UUID "${esppart}")
    prun /usr/bin/gawk -v espUUID="${espUUID}" -i inplace '$2 == "/boot/efi" { $1 = "UUID="espUUID } { print $0 }' "${post_dir}/mnt/etc/fstab"
    # root=UUID= cmdline definition is a hard requirement of sdbootutil
    rootUUID=$(lsblk -n -r -o UUID "${syspart}")
    prun /usr/bin/sed -i -e "s,\$, root=UUID=${rootUUID}," "${post_dir}/mnt/etc/kernel/cmdline"
    echo "56" > "${post_pipe}"
    echo "# Installing boot loader" > "${post_pipe}"
    # Populate ESP
    prun /usr/bin/chroot "${post_dir}/mnt" sdbootutil -vv --esp-path "/boot/efi" --no-variables install 1>&2
    echo "70" > "${post_pipe}"
    echo "# Creating initrd" > "${post_pipe}"
    # FIXME: Dracut gets confused by previous installations on occasion with the default config, override the problematic option temporarily
    /usr/bin/echo 'hostonly_cmdline="no"' | prun tee "${post_dir}/mnt/etc/dracut.conf.d/99-tik.conf"
    # mkinitrd done by add-all-kernels
    prun /usr/bin/chroot "${post_dir}/mnt" sdbootutil -vv --esp-path "/boot/efi" --no-variables add-all-kernels 1>&2
    # FIXME: Dracut gets confused by previous installations on occasion with the default config, remove override now initrd done
    prun /usr/bin/rm "${post_dir}/mnt/etc/dracut.conf.d/99-tik.conf"
    echo "77" > "${post_pipe}"
    log "[configure_esp] ${esppart} configured"
}

configure_factory_reset() {
    echo "# Preparing system" > "${post_pipe}"
    directories=(home opt root srv var)

    prun /usr/bin/mkdir "${post_dir}/mnt/.snapshots/.ori/"
    prun /usr/bin/mkdir "${post_dir}/mnt/.snapshots/.fr/"

    prun /usr/sbin/btrfs subvolume snapshot "${post_dir}/mnt/.snapshots/1/snapshot" "${post_dir}/mnt/.snapshots/.ori/snapshot"
    prun /usr/bin/cp "${post_dir}/mnt/.snapshots/1/info.xml" "${post_dir}/mnt/.snapshots/.ori/info.xml"

    prun /usr/sbin/btrfs subvolume snapshot "${post_dir}/mnt/.snapshots/.ori/snapshot" "${post_dir}/mnt/.snapshots/.fr/snapshot"
    prun /usr/bin/cp "${post_dir}/mnt/.snapshots/.ori/info.xml" "${post_dir}/mnt/.snapshots/.fr/info.xml"
    echo "84" > "${post_pipe}"
    echo "# Finalizing system" > "${post_pipe}"

    for dir in "${directories[@]}"
    do
        prun /usr/sbin/btrfs subvolume snapshot "${post_dir}/mnt/mnt/@/$dir" "${post_dir}/mnt/mnt/@/.${dir}ori"
        prun /usr/sbin/btrfs subvolume snapshot "${post_dir}/mnt/mnt/@/.${dir}ori" "${post_dir}/mnt/mnt/@/.${dir}fr"
        prun /usr/bin/sed -i "s|subvol=@/$dir|subvol=@/.${dir}fr|g" "${post_dir}/mnt/.snapshots/.fr/snapshot/etc/fstab"
    done
    prun /usr/sbin/btrfs subvolume snapshot "${post_dir}/mnt/mnt/@/usr/local" "${post_dir}/mnt/mnt/@/usr/.localori"
    prun /usr/sbin/btrfs subvolume snapshot "${post_dir}/mnt/mnt/@/usr/.localori" "${post_dir}/mnt/mnt/@/usr/.localfr"
    prun /usr/bin/sed -i "s|subvol=@/usr/local|subvol=@/usr/.localfr|g" "${post_dir}/mnt/.snapshots/.fr/snapshot/etc/fstab"

    prun /usr/sbin/btrfs subvolume create "${post_dir}/mnt/.snapshots/.fr/bori"

    prun /usr/bin/cp -r "${post_dir}/mnt/boot/efi" "${post_dir}/mnt/.snapshots/.fr/bori"
    prun /usr/sbin/btrfs subvolume snapshot "${post_dir}/mnt/.snapshots/.fr/bori" "${post_dir}/mnt/.snapshots/.fr/bfr"

    for file in "${post_dir}"/mnt/boot/efi/loader/entries/*
    do
        frpath="/mnt/.snapshots/.fr/bfr/efi/loader/entries/$(basename file)"
        # Check if it's a regular file
        if [ -f "$frpath" ]; then
            prun /usr/bin/sed -i "s/subvol=@\/.snapshots\/1/subvol=@\/.snapshots\/.fr/g" "$frpath"
        fi
    done
    prun /usr/bin/touch "${post_dir}/mnt/.snapshots/.fr/snapshot/.factory_reset"
    prun /usr/sbin/btrfs property set "${post_dir}/mnt/.snapshots/.ori/snapshot" ro true
    prun /usr/sbin/btrfs property set "${post_dir}/mnt/.snapshots/.fr/snapshot" ro true
    prun /usr/sbin/btrfs property set "${post_dir}/mnt/.snapshots/.fr/bori" ro true
    prun /usr/sbin/btrfs property set "${post_dir}/mnt/.snapshots/.fr/bfr" ro true
    echo "91" > "${post_pipe}"
}

unmount_partition() {
    echo "# Unmounting ${syspart}" > "${post_pipe}"
    log "[close_partition] unmounting ${syspart}"
    for i in proc dev run tmp 'boot/efi' etc var '.snapshots' 'sys/kernel/security' 'sys/firmware/efi/efivars' 'sys/fs/cgroup' sys; do
        prun /usr/bin/umount "${post_dir}/mnt/$i"
    done
    prun /usr/bin/umount "${post_dir}/mnt/mnt"
    prun /usr/bin/umount "${post_dir}/mnt"
    prun /usr/bin/rmdir "${post_dir}/mnt"
    echo "100" > "${post_pipe}"
}

post_progress &
find_install
find_esp
mount_partition
configure_esp
configure_factory_reset
unmount_partition
